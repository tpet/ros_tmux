#!/bin/bash
set -e
trap "tmux wait-for -S $1" EXIT

ros_arg() {
    for arg in "${@:2}"; do
        if [[ $arg == "$1:="* ]]; then
            start=`expr \${#1} + 2`
            echo "${arg:${start}}"
        fi
    done
}

log() {
    local format=${ROSCONSOLE_FORMAT:-'${severity}] [${time}]: ${message}]'}
    local severity="$1"
    local walltime=`date "+%s.%6N"`
    local message="$2"
    local node=ros_tmux_node
    eval echo -e "${format}" >> "$log" 2>&1
}

with_suffix() {
    local suffix="$2"
    local dir=`dirname "$1"`
    local name=`basename "$1"`
    local ext="${name##*.}"
    name="${name%.*}"
    echo "${dir}/${name}${suffix}.${ext}"
}

log=`ros_arg __log "$@"`
log=`with_suffix "$log" -stdout`

# Define some handy defaults (do not override what is already set).
# Python output buffering of single line.
if [[ -z "${!PYTHONUNBUFFERED+x}" ]]; then
    export PYTHONUNBUFFERED=1
fi
if [[ -z "${!ROSCONSOLE_STDOUT_LINE_BUFFERED+x}" ]]; then
    export ROSCONSOLE_STDOUT_LINE_BUFFERED=1
fi

log INFO "ROS env:\n`env | grep ROS`"
log INFO "Node command: ${@:2}"

stdbuf -oL "${@:2}" 2>&1 | stdbuf -oL sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g" | tee -a "$log"
log INFO "Node return code: $?"
