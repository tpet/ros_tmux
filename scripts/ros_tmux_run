#!/bin/bash
set -e

ros_arg() {
    for arg in "${@:2}"; do
        if [[ $arg == "$1:="* ]]; then
            start=`expr \${#1} + 2`
            echo "${arg:${start}}"
        fi
    done
}

log() {
    local format=${ROSCONSOLE_FORMAT:-'${severity}] [${time}]: ${message}]'}
    local severity="$1"
    local walltime=`date "+%s.%6N"`
    local message="$2"
    local node=ros_tmux_run
    eval echo -e "${format}" >> "$log" 2>&1
}

run_id() {
    rosparam get /run_id
}

with_suffix() {
    local suffix="$2"
    local dir=`dirname "$1"`
    local name=`basename "$1"`
    local ext="${name##*.}"
    name="${name%.*}"
    echo "${dir}/${name}${suffix}.${ext}"
}

node=`ros_arg __name "$@"`
log=`ros_arg __log "$@"`
# Sometimes, ROS_LOG_FILENAME retains a value for some other node;
# __log argument seems to always contain the correct value.
ROS_LOG_FILENAME="$log"
# Avoid conflicts with rosout publishing everything to the default log,
# use log file with '-stdout' suffix.
log=`with_suffix "$log" -stdout`

if [[ "${ros_tmux_session}" = "run_id" ]]; then
    run_id=`run_id`
    sess=ros_tmux_${run_id}
else
    sess=ros_tmux
fi
if [[ "${ROS_NAMESPACE}" ]]; then
    ns_prefix=`echo "${ROS_NAMESPACE:1}/" | tr '/' '-'`
else
    ns_prefix=
fi
win="${ns_prefix}${node}"
# Create a unique tmux channel for this run, not to get confused by signals from other runs.
channel="$(uuidgen)"

log INFO "Command: $0 $@"
if [[ "$run_id" ]]; then
    log "Run ID: ${run_id}"
fi
log INFO "Node: $1 [$node]"
log INFO "Log: $log"
log INFO "Session:window [channel]: $sess:$win [$channel]"
# log "ROS env:\n`env | grep ROS`"

# Source tmux config before starting new window (indexing from 1).
# Avoid server stopping immediately due to no running session.
# https://github.com/tmux/tmux/issues/736
# Create session and window as needed, avoid printouts.
log INFO "Setting up session, configuration, and window (if needed)..."
ros_tmux=`rospack find ros_tmux`
conf=$ros_tmux/config/ros_tmux.conf
tmux start-server \; source "$conf" \; new-session -d -s $sess -n $win >/dev/null 2>/dev/null \
    || tmux start-server \; source "$conf" \; list-windows -t $sess | grep $win >/dev/null 2>/dev/null \
    || tmux start-server \; source "$conf" \; new-window -t $sess -d -n $win >/dev/null 2>/dev/null

# Terminate whatever is running there before running the program.
log INFO "Terminating previous node if any."
tmux send-keys -t $sess:$win C-c

# Forward env variables to the node (i.e., tmux window).
vars="
ROS_HOSTNAME
ROS_IP
ROS_LOG_FILENAME
ROS_MASTER_URI
ROS_NAMESPACE
ROSCONSOLE_CONFIG_FILE
ROSCONSOLE_FORMAT
ROSCONSOLE_STDOUT_LINE_BUFFERED
"
for var in ${vars}; do
    if [[ -z "${!var+x}" ]]; then
        continue
    fi
    cmd="export ${var}='${!var}'"
    log INFO "Sending keys: $cmd"
    tmux send-keys -t $sess:$win -l '' "$cmd"
    tmux send-keys -t $sess:$win C-m
done

# Avoiding striping spaces between arguments but use parameter expansion.
# tmux send-keys -l -t $sess:$win '' \'"${@:3}"\'
cmd="ros_tmux_node ${channel} $@"
log INFO "Sending keys: $cmd"
tmux send-keys -t $sess:$win -l '' "$cmd"
tmux send-keys -t $sess:$win C-m
log INFO "Node started [$channel]."

log_finish() {
    log INFO "Node finished [$channel].\n"
}
trap log_finish EXIT

sigint_node() {
    log INFO "Forwarding SIGINT signal to node."
    tmux send-keys -t $sess:$win C-c
    # https://stackoverflow.com/questions/7771557/how-to-terminate-a-window-in-tmux
    # tmux kill-window -t $sess:$win
}
sigquit_node() {
    log INFO "Forwarding SIGQUIT signal to node."
    tmux send-keys -t $sess:$win C-\\
}
trap sigint_node SIGINT
trap sigquit_node SIGQUIT SIGTERM

# https://unix.stackexchange.com/questions/144663/have-tmux-wait-until-i-ssh-in-to-complete-rest-of-tmuxinator-script
# Handlers don't get called before tmux wait-for returns which prevents clean shutdown via Ctrl-C.
# tmux wait-for "${channel}"
tmux wait-for "${channel}" &
until wait; do
    true
done
