#!/usr/bin/env python
from __future__ import absolute_import, division, print_function
# import os
import roslaunch
# import rospy
import sys


def print_node_info(node):
    for var in ('package',
                'type',
                'name',
                'namespace',
                'machine_name',
                'args',
                'remap_args',
                'env_args',
                'filename'):
        print('%s: %s' % (var, node.__getattribute__(var)))


def apply_tmux_prefix(node):
    if node.launch_prefix:
        print('[ros_tmux] Adding launch prefix "%s" for node %s.' % (node.launch_prefix, node.name))
        # rospy.loginfo('Adding launch prefix "%s" for node %s.', node.launch_prefix, node.name, logger_name='ros_tmux')
        node.launch_prefix = 'ros_tmux_run %s' % node.launch_prefix
        return
    node.launch_prefix = 'ros_tmux_run '


def use_screen_output(node):
    if node.output == 'log':
        print('[ros_tmux] Overriding output %s for node %s.' % (node.output, node.name))
        # rospy.loginfo('Overriding output %s for node %s.', node.output, node.name, logger_name='ros_tmux')
    node.output = 'screen'


def set_env(node):
    # Forward ROS_NAMESPACE and some other env variables to node within tmux
    # session in command-line args in form __env:=KEY=VALUE, keeping
    # everything in a single command, which can be manually restarted.
    # Process these args into exported env variables inside ros_tmux_node.
    # Use current env as default to the variables defined in launch file.
    # node.args = node.args or ''
    # node.args = '%s %s:=%s' % (node.args, '__ns', node.namespace)

    # node.env_args = node.env_args or []
    # env = dict(node.env_args)
    # Node-specific variables only:
    # ROS_NAMESPACE forwarded as command line arg .
    # and ROS_LOG_FILENAME
    # env['ROS_NAMESPACE'] = node.namespace[:-1]
    # for var in ('ROS_MASTER_URI', 'ROS_IP', 'ROS')

    # node.args = '%s %s:=%s' % (node.args, '__env:ROS_NAMESPACE=%s', node.namespace[:-1])

    # node.env_args = env.items()
    pass


def adjust_nodes(nodes):
    for node in nodes:
        # print_node_info(node)
        apply_tmux_prefix(node)
        # set_env(node)
        use_screen_output(node)


uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)
roslaunch.configure_logging(uuid)

# Resolve <package> <launch> arguments.
launch_paths = roslaunch.rlutil.resolve_launch_arguments(sys.argv[1:])
launch = roslaunch.parent.ROSLaunchParent(uuid, launch_paths)

# Start infrastructure in advance to parse the launch file into config.
# (From the code, running it repeatedly seems to be safe.)
launch._load_config()
adjust_nodes(launch.config.nodes)

# Parse the launch file (done), start roscore and nodes, advertise topics.
# Nothing is published yet. (No handshake until spin?)
launch.start()

try:
    launch.spin()
finally:
    # After Ctrl+C, stop all nodes from running
    launch.shutdown()
